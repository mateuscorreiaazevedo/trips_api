generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Primaries Relations
model User {
  id         BigInt   @id @default(autoincrement())
  email      String   @unique
  password   String
  avatar     String?
  first_name String
  last_name  String
  birth_date DateTime

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  accomodations Accomodation[]
  bookings      Booking[]
  reviews       Review[]
  favorites     Favorite[]
}

model Category {
  id   BigInt @id @default(autoincrement())
  tag  String @unique
  name String
  icon String

  created DateTime @default(now())

  @@map("categories")
}

model Accomodation {
  id      BigInt   @id @default(autoincrement())
  host    User     @relation(fields: [host_id], references: [id])
  host_id BigInt
  reviews Review[]

  title       String
  description String?
  images      Image[]
  category_id BigInt

  price_per_night Float
  cleaning_fee    Float

  rooms      Int
  beds       Int
  bathrooms  Int
  services   Service @relation(fields: [service_id], references: [id])
  service_id BigInt

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  bookings   Booking[]
  favorites  Favorite[]

  @@map("accomodations")
}

model Booking {
  id      BigInt @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt

  accomodation    Accomodation @relation(fields: [accomodation_id], references: [id])
  accomodation_id BigInt

  checkin_date   DateTime
  checkout_date  DateTime
  checked_in     Boolean   @default(false)
  checked_out    Boolean   @default(false)
  cancelled_date DateTime?
  cancelled      Boolean   @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("bookings")
}

model Review {
  id              BigInt        @id @default(autoincrement())
  accomodation    Accomodation? @relation(fields: [accomodation_id], references: [id])
  accomodation_id BigInt?
  user            User          @relation(fields: [user_id], references: [id])
  user_id         BigInt

  rating  Int
  comment String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("reviews")
}

model Favorite {
  id      BigInt @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt

  accomodation    Accomodation @relation(fields: [accomodation_id], references: [id])
  accomodation_id BigInt

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("favorites")
}

// Secondary Relations
model Service {
  id BigInt @id @default(autoincrement())

  laundry      Boolean @default(false)
  kitchen      Boolean @default(false)
  wifi         Boolean @default(false)
  tv           Boolean @default(false)
  phone        Boolean @default(false)
  ac           Boolean @default(false)
  office_space Boolean @default(false)
  beach_access Boolean @default(false)
  pets         Boolean @default(false)

  accomodations Accomodation[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("services")
}

model Image {
  id  BigInt @id @default(autoincrement())
  url String @unique

  accomodation_id BigInt
  accomodation    Accomodation @relation(fields: [accomodation_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("images")
}
